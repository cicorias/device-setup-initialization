name: PXE System CI

on:
  push:
    branches: [ split-and-merge-scripts ]  # Currently running on this branch
    # branches: [ main ]  # Uncomment this line when ready to run on main
  pull_request:
    branches: [ split-and-merge-scripts ]  # Currently running on PRs to this branch
    # branches: [ main ]  # Uncomment this line when ready to run on PRs to main
  workflow_dispatch:  # Allows manual triggering

env:
  ARTIFACTS: ${{ github.workspace }}/artifacts

jobs:
  validate-scripts:
    name: Validate Shell Scripts
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Install shellcheck
      run: sudo apt-get update && sudo apt-get install -y shellcheck
      
    - name: Run shellcheck on scripts
      run: |
        find scripts/ -name "*.sh" -type f | xargs shellcheck
        
  test-pxe-system:
    name: Test PXE System Creation
    runs-on: ubuntu-latest
    needs: validate-scripts
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup environment
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          debootstrap \
          squashfs-tools \
          qemu-utils \
          syslinux-utils \
          isolinux \
          xorriso
        
    - name: Create artifacts directory
      run: mkdir -p ${{ env.ARTIFACTS }}
      
    - name: Make scripts executable
      run: chmod +x scripts/*.sh
      
    - name: Run PXE system creation
      run: |
        cd scripts
        # Set environment variables for CI
        export OUTPUT_SQUASHFS=true
        export OUTPUT_IMG=false  # Skip IMG creation in CI to save time
        export CI=true
        ./create-pxe-system.sh
      
    - name: Test deployment package
      run: |
        cd scripts
        ./test-deployment-package.sh
        
    - name: Generate PXE config
      run: |
        cd scripts
        ./generate-pxe-config.sh
        
    - name: Verify artifacts
      run: |
        echo "=== Artifacts created ==="
        ls -la ${{ env.ARTIFACTS }}/
        
        echo "=== PXE files ==="
        if [ -d "${{ env.ARTIFACTS }}/pxe-files" ]; then
          find ${{ env.ARTIFACTS }}/pxe-files -type f | head -20
        fi
        
        echo "=== Server deployment ==="
        if [ -d "${{ env.ARTIFACTS }}/server-deployment" ]; then
          find ${{ env.ARTIFACTS }}/server-deployment -type f | head -20
        fi
        
    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: pxe-system-artifacts
        path: |
          ${{ env.ARTIFACTS }}/pxe-files/
          ${{ env.ARTIFACTS }}/server-deployment/
          ${{ env.ARTIFACTS }}/os-images/
        retention-days: 7
        
  test-deployment-scripts:
    name: Test Deployment Scripts
    runs-on: ubuntu-latest
    needs: test-pxe-system
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download artifacts
      uses: actions/download-artifact@v4
      with:
        name: pxe-system-artifacts
        path: ${{ env.ARTIFACTS }}
        
    - name: Make scripts executable
      run: chmod +x scripts/*.sh
        
    - name: Test deployment to PXE server (dry run)
      run: |
        cd scripts
        # Run deploy script in dry-run mode if it supports it
        if ./deploy-to-pxe-server.sh --help 2>&1 | grep -q "dry-run\|test"; then
          ./deploy-to-pxe-server.sh --dry-run || echo "Deployment script test completed"
        else
          echo "Deployment script found but no dry-run mode available"
          echo "Checking script syntax..."
          bash -n ./deploy-to-pxe-server.sh
        fi

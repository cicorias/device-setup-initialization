#!/bin/bash

set -euo pipefail

# Generate PXE configuration snippets for built images
# Creates integration files that can be deployed to PXE server

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

log() {
    echo -e "${GREEN}[$(date +'%Y-%m-%d %H:%M:%S')] $1${NC}"
}

warn() {
    echo -e "${YELLOW}[$(date +'%Y-%m-%d %H:%M:%S')] WARNING: $1${NC}"
}

error() {
    echo -e "${RED}[$(date +'%Y-%m-%d %H:%M:%S')] ERROR: $1${NC}"
    exit 1
}

info() {
    echo -e "${BLUE}[$(date +'%Y-%m-%d %H:%M:%S')] INFO: $1${NC}"
}

# Get script directory and project root
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PROJECT_ROOT="$(dirname "$SCRIPT_DIR")"
ARTIFACTS_DIR="$PROJECT_ROOT/artifacts"
INTEGRATION_DIR="$ARTIFACTS_DIR/pxe-integration"

# Configuration
PXE_SERVER_IP="${PXE_SERVER_IP:-10.1.1.1}"
NFS_ROOT="${NFS_ROOT:-/srv/nfs}"
HTTP_ROOT="${HTTP_ROOT:-/var/www/html/pxe}"

usage() {
    echo "Usage: $0 [options]"
    echo
    echo "Generate PXE configuration snippets for built images"
    echo
    echo "Options:"
    echo "  -s, --server-ip IP    PXE server IP (default: 10.1.1.1)"
    echo "  -n, --nfs-root PATH   NFS root path (default: /srv/nfs)"
    echo "  -w, --http-root PATH  HTTP root path (default: /var/www/html/pxe)"
    echo "  -h, --help           Show this help"
    echo
    echo "Environment variables:"
    echo "  PXE_SERVER_IP        Override default server IP"
    echo "  NFS_ROOT            Override default NFS root"
    echo "  HTTP_ROOT           Override default HTTP root"
}

# Parse command line arguments
while [[ $# -gt 0 ]]; do
    case $1 in
        -s|--server-ip)
            PXE_SERVER_IP="$2"
            shift 2
            ;;
        -n|--nfs-root)
            NFS_ROOT="$2"
            shift 2
            ;;
        -w|--http-root)
            HTTP_ROOT="$2"
            shift 2
            ;;
        -h|--help)
            usage
            exit 0
            ;;
        *)
            error "Unknown option: $1"
            ;;
    esac
done

log "Generating PXE integration configuration"
info "PXE Server IP: $PXE_SERVER_IP"
info "NFS Root: $NFS_ROOT"
info "HTTP Root: $HTTP_ROOT"

# Check if artifacts exist
if [[ ! -d "$ARTIFACTS_DIR" ]]; then
    error "Artifacts directory not found. Run ./scripts/create-pxe-system.sh first."
fi

# Create integration directory
mkdir -p "$INTEGRATION_DIR"

# Generate GRUB configuration entries
log "Generating GRUB configuration entries..."

cat > "$INTEGRATION_DIR/grub-entries.cfg" << EOF
# GRUB Configuration Entries for Device Setup Images
# Generated by generate-pxe-config.sh on $(date)
# Server: $PXE_SERVER_IP

EOF

# Check for IMG files and generate entries
if [[ -d "$ARTIFACTS_DIR/images" ]] && [[ -n "$(ls -A "$ARTIFACTS_DIR/images"/*.img 2>/dev/null)" ]]; then
    log "Found IMG files, generating HTTP-based boot entries..."
    
    for img_file in "$ARTIFACTS_DIR/images"/*.img; do
        if [[ -f "$img_file" ]]; then
            img_name=$(basename "$img_file" .img)
            img_filename=$(basename "$img_file")
            
            case "$img_name" in
                *dual-os*)
                    menu_title="Dual-OS Installation System"
                    description="Install Ubuntu and Debian dual-boot system"
                    ;;
                *ubuntu*)
                    menu_title="Ubuntu Installation"
                    description="Install Ubuntu from custom image"
                    ;;
                *debian*)
                    menu_title="Debian Installation"
                    description="Install Debian from custom image"
                    ;;
                *)
                    menu_title="Custom Installation ($img_name)"
                    description="Install from custom image: $img_name"
                    ;;
            esac
            
            cat >> "$INTEGRATION_DIR/grub-entries.cfg" << EOF
menuentry '$menu_title' --id=$img_name {
    echo 'Loading $description...'
    echo 'Downloading image from HTTP server...'
    
    # Download and boot from IMG file
    # Note: This requires GRUB HTTP support and custom initrd
    linux /kernels/device-setup/vmlinuz boot=live fetch=http://$PXE_SERVER_IP/images/$img_filename ip=dhcp
    initrd /initrd/device-setup/initrd
    boot
}

EOF
        fi
    done
fi

# Check for legacy SquashFS and generate entries
if [[ -f "$ARTIFACTS_DIR/pxe-files/filesystem.squashfs" ]]; then
    log "Found SquashFS file, generating live boot entry..."
    
    cat >> "$INTEGRATION_DIR/grub-entries.cfg" << EOF
menuentry 'Device Setup Live System' --id=device-setup-live {
    echo 'Loading Device Setup Live System...'
    echo 'Using SquashFS live filesystem...'
    
    # Live boot from SquashFS
    linux /kernels/device-setup/vmlinuz boot=live fetch=http://$PXE_SERVER_IP/pxe-files/filesystem.squashfs ip=dhcp
    initrd /initrd/device-setup/initrd
    boot
}

EOF
fi

# Generate deployment instructions
log "Generating deployment instructions..."

cat > "$INTEGRATION_DIR/deployment-instructions.md" << EOF
# PXE Server Deployment Instructions

Generated on: $(date)
Target PXE Server: $PXE_SERVER_IP

## Prerequisites

1. PXE server must be set up using [cicorias/pxe-server-setup](https://github.com/cicorias/pxe-server-setup)
2. Server must have the following services running:
   - DHCP (if local DHCP)
   - TFTP
   - HTTP (nginx)
   - NFS

## Automated Deployment

Use the deployment script for automatic integration:

\`\`\`bash
./scripts/deploy-to-pxe-server.sh $PXE_SERVER_IP
\`\`\`

## Manual Deployment

If automated deployment fails, follow these steps:

### 1. Copy Boot Files

Copy kernel and initrd to TFTP server:

\`\`\`bash
# On PXE server
mkdir -p /var/lib/tftpboot/kernels/device-setup
mkdir -p /var/lib/tftpboot/initrd/device-setup

# Copy from artifacts/pxe-files/ (if available)
cp vmlinuz /var/lib/tftpboot/kernels/device-setup/
cp initrd /var/lib/tftpboot/initrd/device-setup/
\`\`\`

### 2. Deploy IMG Files

EOF

if [[ -d "$ARTIFACTS_DIR/images" ]] && [[ -n "$(ls -A "$ARTIFACTS_DIR/images"/*.img 2>/dev/null)" ]]; then
    cat >> "$INTEGRATION_DIR/deployment-instructions.md" << EOF
Copy IMG files to HTTP server:

\`\`\`bash
# On PXE server
mkdir -p $HTTP_ROOT/images

# Copy IMG files
EOF
    
    for img_file in "$ARTIFACTS_DIR/images"/*.img; do
        if [[ -f "$img_file" ]]; then
            img_filename=$(basename "$img_file")
            echo "cp $img_filename $HTTP_ROOT/images/" >> "$INTEGRATION_DIR/deployment-instructions.md"
        fi
    done
    
    cat >> "$INTEGRATION_DIR/deployment-instructions.md" << EOF
\`\`\`

Add IMG files to PXE manager:

\`\`\`bash
# On PXE server (in pxe-server-setup directory)
EOF
    
    for img_file in "$ARTIFACTS_DIR/images"/*.img; do
        if [[ -f "$img_file" ]]; then
            img_filename=$(basename "$img_file")
            echo "sudo ./scripts/08-iso-manager.sh add $HTTP_ROOT/images/$img_filename" >> "$INTEGRATION_DIR/deployment-instructions.md"
        fi
    done
    
    echo '```' >> "$INTEGRATION_DIR/deployment-instructions.md"
    echo >> "$INTEGRATION_DIR/deployment-instructions.md"
fi

if [[ -f "$ARTIFACTS_DIR/pxe-files/filesystem.squashfs" ]]; then
    cat >> "$INTEGRATION_DIR/deployment-instructions.md" << EOF
### 3. Deploy SquashFS File

Copy SquashFS to HTTP server:

\`\`\`bash
# On PXE server
cp filesystem.squashfs $HTTP_ROOT/pxe-files/
chown www-data:www-data $HTTP_ROOT/pxe-files/filesystem.squashfs
chmod 644 $HTTP_ROOT/pxe-files/filesystem.squashfs
\`\`\`

EOF
fi

cat >> "$INTEGRATION_DIR/deployment-instructions.md" << EOF
### 4. Update GRUB Configuration

Merge the generated GRUB entries into the PXE server configuration:

\`\`\`bash
# On PXE server
cat grub-entries.cfg >> /var/lib/tftpboot/grub/grub.cfg

# Restart TFTP service
sudo systemctl restart tftpd-hpa
\`\`\`

### 5. Verify Configuration

\`\`\`bash
# Check services
sudo ./scripts/validate-pxe.sh

# Check ISO manager status
sudo ./scripts/08-iso-manager.sh status

# Test TFTP access
tftp $PXE_SERVER_IP -c get grub/grub.cfg
\`\`\`

## Troubleshooting

### Common Issues

1. **TFTP files not accessible**
   - Check TFTP service: \`sudo systemctl status tftpd-hpa\`
   - Verify file permissions: \`ls -la /var/lib/tftpboot/\`

2. **HTTP files not serving**
   - Check nginx service: \`sudo systemctl status nginx\`
   - Verify HTTP configuration: \`curl http://$PXE_SERVER_IP/images/\`

3. **GRUB menu not updated**
   - Check GRUB configuration: \`cat /var/lib/tftpboot/grub/grub.cfg\`
   - Restart TFTP service: \`sudo systemctl restart tftpd-hpa\`

### Log Files

- TFTP: \`sudo journalctl -u tftpd-hpa -f\`
- HTTP: \`sudo tail -f /var/log/nginx/access.log\`
- DHCP: \`sudo journalctl -u isc-dhcp-server -f\`

EOF

# Generate copy commands script
log "Generating automated copy commands..."

cat > "$INTEGRATION_DIR/copy-commands.sh" << 'EOF'
#!/bin/bash

# Automated copy commands for manual deployment
# Run this script on the PXE server after copying files

set -euo pipefail

# Colors
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m'

log() {
    echo -e "${GREEN}[$(date +'%H:%M:%S')] $1${NC}"
}

error() {
    echo -e "${RED}[$(date +'%H:%M:%S')] ERROR: $1${NC}"
    exit 1
}

# Check if running as root
if [[ $EUID -ne 0 ]]; then
    error "This script must be run as root"
fi

# Configuration (adjust as needed)
TFTP_ROOT="/var/lib/tftpboot"
HTTP_ROOT="/var/www/html/pxe"
PXE_SETUP_DIR="/home/cicorias/g/pxe-server-setup"

log "Setting up device setup files on PXE server..."

# Create directories
log "Creating directories..."
mkdir -p "$TFTP_ROOT/kernels/device-setup"
mkdir -p "$TFTP_ROOT/initrd/device-setup"
mkdir -p "$HTTP_ROOT/images"
mkdir -p "$HTTP_ROOT/pxe-files"

# Set ownership and permissions
chown -R tftp:tftp "$TFTP_ROOT/kernels/device-setup" "$TFTP_ROOT/initrd/device-setup"
chown -R www-data:www-data "$HTTP_ROOT/images" "$HTTP_ROOT/pxe-files"
chmod -R 755 "$TFTP_ROOT/kernels/device-setup" "$TFTP_ROOT/initrd/device-setup"
chmod -R 755 "$HTTP_ROOT/images" "$HTTP_ROOT/pxe-files"

log "Directory structure created successfully"

# Instructions for manual file copying
echo
echo "Next steps:"
echo "1. Copy kernel files to: $TFTP_ROOT/kernels/device-setup/"
echo "2. Copy initrd files to: $TFTP_ROOT/initrd/device-setup/"
echo "3. Copy IMG files to: $HTTP_ROOT/images/"
echo "4. Copy SquashFS files to: $HTTP_ROOT/pxe-files/"
echo "5. Update GRUB configuration"
echo "6. Restart services: systemctl restart tftpd-hpa nginx"

EOF

chmod +x "$INTEGRATION_DIR/copy-commands.sh"

# Generate file manifest
log "Generating file manifest..."

cat > "$INTEGRATION_DIR/manifest.txt" << EOF
# Device Setup Integration Files Manifest
# Generated on: $(date)

## Integration Configuration Files
- grub-entries.cfg           # GRUB menu entries for device setup images
- deployment-instructions.md # Detailed deployment instructions
- copy-commands.sh          # Automated setup script for PXE server
- manifest.txt              # This file

## Build Artifacts (if available)
EOF

if [[ -d "$ARTIFACTS_DIR/images" ]]; then
    echo "## IMG Files" >> "$INTEGRATION_DIR/manifest.txt"
    for img_file in "$ARTIFACTS_DIR/images"/*.img; do
        if [[ -f "$img_file" ]]; then
            img_name=$(basename "$img_file")
            img_size=$(du -h "$img_file" | cut -f1)
            echo "- $img_name ($img_size)" >> "$INTEGRATION_DIR/manifest.txt"
        fi
    done
fi

if [[ -d "$ARTIFACTS_DIR/pxe-files" ]]; then
    echo "## PXE Files" >> "$INTEGRATION_DIR/manifest.txt"
    for file in "$ARTIFACTS_DIR/pxe-files"/*; do
        if [[ -f "$file" ]]; then
            filename=$(basename "$file")
            filesize=$(du -h "$file" | cut -f1)
            echo "- $filename ($filesize)" >> "$INTEGRATION_DIR/manifest.txt"
        fi
    done
fi

log "PXE integration configuration generated successfully!"
info "Integration files location: $INTEGRATION_DIR"

echo
echo -e "${GREEN}=== Generated Files ===${NC}"
echo "📁 Integration directory: $INTEGRATION_DIR"
echo "📄 GRUB entries: grub-entries.cfg"
echo "📄 Instructions: deployment-instructions.md"
echo "📄 Setup script: copy-commands.sh"
echo "📄 Manifest: manifest.txt"
echo
echo "Next steps:"
echo "1. Review generated configuration in $INTEGRATION_DIR"
echo "2. Deploy using: ./scripts/deploy-to-pxe-server.sh <server-ip>"
echo "3. Or follow manual instructions in deployment-instructions.md"
